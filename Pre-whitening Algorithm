#We present our pre-whitening algorithm (\textit{deep\_clean\_peak\_finder}) and attendant peak extraction code (\textit{peak\_finder\_deep\_clean}) discussed in Chapter \ref{pre-whitening}. All code was written in \textsc{Python}.

#The pre-whitening algorithm can be implemented with a minimum frequency of considered mode, however we recommend setting minimum mode frequency and extracting peaks from the mode information returned by the pre-whitening code for optimal results. The Nyquist factor (the factor of how many amplitude spectra above the Nyquist frequency are considered), SNR criterion, maximum number of modes and the behavior of the noise estimation function can be configured as arguments. 

#The peak extraction code is used to extract peaks from data created by the pre-whitening code. The minimum frequency of modes, whether the code implements a p mode frequency minimum (see Chapter \ref{P-L Pressure Mode Frequency Minimum}), the separation factor between mode frequencies, whether the code implements a SNR minimum and the behavior of the noise estimation function can be configured as arguments.

import numpy as np
from astropy.timeseries import LombScargle
from scipy.optimize import curve_fit
from scipy.signal import find_peaks

def find_nearest(array, value):
    """
    Finds array element closest to given value and returns index of array point
    """
    idx = (abs(array-value)).argmin()
    idx_array = np.where(array == array[idx])
    return idx_array

def sinc_function(x):
    """
    Defines sinc function
    """
    sinc = np.divide(np.sin(x),x,out=np.ones_like(np.sin(x)),where=x!=0)
    return sinc

def sinc_rescale(amplitude, frequency, nyquist):
    """
    Re-scales an amplitude spectrum to account for averaging of pulsations of cadence integrations
    Amplitude spectrum given in (ppm)
    """
    rescale_0 = sinc_function((np.pi/2)*(frequency[0:find_value(frequency,nyquist)]/nyquist))
    rescale_1 = sinc_function((np.pi/2)*((frequency.max()-frequency[find_value(frequency,nyquist):])/nyquist))
    rescale_factor = np.concatenate((rescale_0,rescale_1))
    rescaled_amplitude = amplitude/rescale_factor *cds.ppm
    return rescaled_amplitude

def noise_complex(freq,amplitude,time,high_low_filter=False,step_factor=5,peak_filter_factor=3):
    """
    Function to calculate a robust noise average across a given spectrum
    """
    Step factor dictates at what frequency the noise value is sampled. The higher the step factor, the more the amplitude spectrum is sampled
    """
    amplitude_noise = np.copy(amplitude)
    if high_low_filter is not False:
        lower_bound = where_numax(freq,high_low_filter[0])[0][0]
        upper_bound = where_numax(freq,high_low_filter[1])[0][0]
        freq_range = freq[lower_bound[0][0]:upper_bound[0][0]]
        length = len(freq_range)
    else:
        length = len(freq)
        lower_bound = 0
        upper_bound = length
        freq_range = freq

    noise_freq,noise=[],[]
    test_window_index = np.where((freq>5-0.5)&(freq<5+0.5))[0]
    window_length = len(test_window_index)
    step = int(window_length/step_factor)

    #Iteratively step through amplitude spectrum, sampling within a window function, to obtain noise estimates at each point   
    for i in range(lower_bound,upper_bound,step):
        lower_index=np.max([int(i-0.5*window_length), 0])
        upper_index=np.min([int(i+0.5*window_length), length-1])
        if lower_index == 0:
            upper_index=i+window_length
            lower_index=upper_index-window_length            
        if upper_index == length-1:
            lower_index=length-window_length-1
        amplitude_array = amplitude_noise[lower_index:upper_index]
        for j in range(peak_filter_factor):
            peak_index = np.where(amplitude_array-np.median(amplitude_array)>2*np.median(amplitude_array))[0]
            amplitude_array[peak_index]=np.median(amplitude_array)
        noise_freq.append(freq[int(0.5*(lower_index+upper_index))])
        noise.append(np.median(amplitude_array))
    
    noise_freq = np.array(noise_freq)
    noise = np.array(noise)
    noise = np.interp(freq_range,noise_freq,noise)
    
    if high_low_filter is not False:
        return noise, freq_range
    else:
        return noise

def cos_function(t,amp,freq,phase):
    output = amp*np.cos(2*np.pi*freq*t+phase)
    return output

def peak_clean(timeseries,flux,parameters_initial):
    """
    Code to optimise and subtract a sinusoidal function from a light curve
    """
    Parameters must have the following structure: 
    np.array([(ampltiude_est,frequency_est,phase_est,displacement_est),
    (ampltiude_lb,frequency_lb,phase_lb,displacement_lb),
    (ampltiude_ub,frequency_ub,phase_ub,displacement_ub)]))
    """
    parameters, pcovariance = curve_fit(cos_function, timeseries, flux,p0=parameters_initial[0],bounds=parameters_initial[1:3])
    flux=flux-cos_function(timeseries, *parameters)
    return parameters, flux

def deep_clean_peak_finder(time,flux,nyquist,peak_number=100000,gaia_Mv=False,nyquist_factor=2,sample_rate=10,SN_criterion=4,noise_step_factor=5,peak_filter_factor=3,minimum_frequency=False):
    #set time to run from 0; Set flux to fluctuate about 0
    time = time - min(time)
    flux = flux - np.mean(flux)

    #Begin clean function
    peak_frequency = np.zeros(shape=(0,))
    peak_amplitude = np.zeros(shape=(0,))
    peak_phase = np.zeros(shape=(0,))
    peak_SN = np.zeros(shape=(0,))
    
    #Obtain LS Periodogram
    ls = LombScargle(time,flux)
    frequency,power_spectrum=ls.autopower(nyquist_factor=nyquist_factor,samples_per_peak=sample_rate,normalization='psd', 
    maximum_frequency=(2*nyquist))
    #Rescale to Amplitude
    negative_index=np.where(power_spectrum<0)[0]
    power_spectrum[negative_index]=0
    #Convert to amplitude
    amplitude_spectrum = np.sqrt(power_spectrum)*np.sqrt(4./len(time))
    #Sinc rescale
    amplitude_spectrum = sinc_rescale(amplitude_spectrum,frequency,nyquist)
    #Only consider peaks in frequency range [minimum_frequency,2*nyquist-minimum_frequency]
    #Note consider issue of power leakage 
    if not minimum_frequency == False:
        lower_bound = find_nearest(frequency,minimum_frequency)[0][0]
        upper_bound = find_nearest(frequency,2*nyquist.value-minimum_frequency)[0][0]
        high_low_filter = [lower_bound,upper_bound]
        amplitude_spectrum = amplitude_spectrum[high_low_filter].value
        frequency = frequency[high_low_filter]
    peak_index = np.where(amplitude_spectrum==np.max(amplitude_spectrum))[0]
    #Prepare S/N array for consideration
    noise = noise_complex(frequency,amplitude_spectrum.value,time,
    step_factor=noise_step_factor,peak_filter_factor=peak_filter_factor)
    global_noise_estimate = np.median(noise)
    
    while True:
    #Store and remove gdor peaks from the flux data
        if (amplitude_spectrum[peak_index].value/noise[peak_index])<SN_criterion:
            break
        elif len(peak_frequency)>= peak_number:
            break
        else:
            phase = np.pi
            freq_err = np.sqrt(6/(np.pi**3)) * global_noise_estimate/amplitude_spectrum[peak_index]/max(time)
            amp_err = np.sqrt(2/np.pi) * global_noise_estimate
            if peak_index+1>=(len(frequency)-1):
                freq_step = np.abs(frequency[peak_index]-frequency[peak_index-1])
                amp_step = np.abs(amplitude_spectrum[peak_index]-amplitude_spectrum[peak_index-1])
            else:
                freq_step = np.abs(frequency[peak_index+1]-frequency[peak_index])
                amp_step = np.abs(amplitude_spectrum[peak_index+1]-amplitude_spectrum[peak_index])
            if freq_step>freq_err:
                freq_err=freq_step
            if amp_step>amp_err:
                amp_err=amp_step

            parameters = np.array([(amplitude_spectrum[peak_index].value[0],frequency[peak_index][0],phase),
            ((amplitude_spectrum[peak_index].value[0]-amp_err),(frequency[peak_index][0]-freq_err)[0],0.0),
            ((amplitude_spectrum[peak_index].value[0]+amp_err),(frequency[peak_index][0]+freq_err)[0],2*np.pi)])
            try:
                parameters, flux = peak_clean(time,flux,parameters)
            except RuntimeError:
                break
            except ValueError:
                break
            peak_amplitude = np.append(peak_amplitude,parameters[0])
            peak_frequency = np.append(peak_frequency,parameters[1])
            peak_phase = np.append(peak_phase,parameters[2])
            peak_SN = np.append(peak_SN,parameters[0]/noise[peak_index])

            ls = LombScargle(time,flux)
            frequency,power_spectrum=ls.autopower(nyquist_factor=nyquist_factor,samples_per_peak=sample_rate,normalization='psd',maximum_frequency=(2*nyquist))
            negative_index=np.where(power_spectrum<0)[0]
            power_spectrum[negative_index]=0
            amplitude_spectrum = np.sqrt(power_spectrum)*np.sqrt(4./len(time))
            amplitude_spectrum = sinc_rescale(amplitude_spectrum,frequency,nyquist)        
            noise = noise_complex(frequency,amplitude_spectrum.value,time,step_factor=noise_step_factor,peak_filter_factor=peak_filter_factor)
            global_noise_estimate = np.median(noise)
            peak_index = np.where(amplitude_spectrum==np.max(amplitude_spectrum))[0]
            if len(peak_frequency)%100==0:
                print(len(peak_frequency))
            
    #Data row shape - (frequency,period,amplitude,phase,displacement)
    peak_output_data = np.zeros(shape=(len(peak_frequency),5))     

    for i in range(len(peak_output_data)):
        peak_output_data[i,0]=peak_frequency[i]
        peak_output_data[i,1]=np.reciprocal(peak_frequency[i])
        peak_output_data[i,2]=peak_amplitude[i]
        peak_output_data[i,3]=peak_phase[i]
        peak_output_data[i,4]=peak_SN[i]
    
    return peak_output_data
    
def find_FWHM(time):
    """
    Takes a series of time points, and determines the FWHM of the time series.
    Assumes negligible gaps in the time series, where there are large gaps in this data this function will be erroneous
    """
    duration = time[len(time)-1] - time[0]
    FWHM = 1/duration

    return FWHM

def peak_separation(FWHM, frequencies, separation_factor):
    """
    Takes a collection of frequencies, and a FWHM, and determines the 
    appropriate number of bins to which need to be excluded in the vicinity 
    of a peak to determine a new peak, in amplitude space
    """
    counter = 0
    separation = 0
    while separation < FWHM:
        counter = counter + 1
        separation = separation + 
        (frequencies[counter] - frequencies[counter - 1])
    bin_spacing = counter*separation_factor
    return bin_spacing
    
def blind_peak_finder(power_spectrum, frequencies, peak_separation, 
peak_number):
    """
    Finds the bare peaks of a power spectrum, regardless of any other parameter
    """
    peak_f_index = find_peaks(power_spectrum, distance = peak_separation)[0]
    peak_frequencies = frequencies
    [peak_f_index[power_spectrum[peak_f_index].argsort()[::-1]]]
    return peak_frequencies[0:peak_number]

def reject_outliers(data, m = 2.):
    d = np.abs(data - np.median(data))
    mdev = np.median(d)
    s = d/mdev if mdev else 0.
    return data[s<m]

def nyquist_calculator(timeseries, power_spectrum, frequency,peak_number=10,separation_factor=5,tolerance=0.01):
    FWHM = find_FWHM(timeseries)
    peak_sep = peak_separation(FWHM,frequency,separation_factor)
    peaks = blind_peak_finder(power_spectrum, frequency, peak_sep,max(10,peak_number))

    difference = []
    for i in range(0,len(timeseries)-1):
        difference.append(timeseries[i+1]-timeseries[i])
    difference = np.array(difference)
    difference = reject_outliers(difference)
    nyquist_estimate = 1/np.mean(difference)*0.5
    nyquist_frequency = np.abs((peaks + peaks[:, None])/2)
    if len(nyquist_frequency[(nyquist_frequency>nyquist_estimate-tolerance)&(nyquist_frequency<nyquist_estimate+tolerance)]) == 0:
        return nyquist_estimate/u.day
    else:
        nyquist_frequency = np.median
        (nyquist_frequency[(nyquist_frequency>nyquist_estimate-tolerance)&(nyquist_frequency<nyquist_estimate+tolerance)])/u.day
        return nyquist_frequency

def Mv_prediction(period,gradient=-2.89,intercept=-1.31):
    return gradient*np.log10(period)+intercept

def Period_prediction(Mv,gradient=-2.89,intercept=-1.31):
    return 10**((Mv - intercept)/gradient)

def peak_finder_deep_clean(peak_array, timeseries, frequency_array,amplitude_array, gaia_Mv, gaia_std, peak_number, selection, minimum_frequency=0,tolerance=10, separation_factor=10, gradient=-2.89, intercept=-1.31,gdor_cut=-1.021, std_factor=3,signal_to_noise_factor=False,step_factor=5,peak_filter_factor=3,include_gmode=False):
    """
    Takes as an argument, an array of pre-whitened peak frequencies, returns peaks that are; above a gdor frequency calculated according to the star's Mv; are not alias frequencies; are above a minimum frequency and below a maximum frequency
    Returns the selected number of peaks as frequency or P values
    """
    FWHM = find_FWHM(timeseries)
    nyquist = nyquist_calculator(timeseries,amplitude_array,frequency_array).value

    if gaia_Mv > Mv_prediction(1/(2*nyquist)):
        return 'problem star', 'problem star'

    gdor_oscillations_f = np.zeros(shape=(0,))
    gdor_oscillations_p = np.zeros(shape=(0,))
    peak_f = np.zeros(shape=(0,))
    peak_p = np.zeros(shape=(0,))
    index_store = []
    
    if not include_gmode:
        for i in range(len(peak_array)):
            if (peak_array[i][0]>minimum_frequency)&(peak_array[i][0]<(2*nyquist-minimum_frequency)):
                if peak_array[i][0] < 1/Period_prediction(gaia_Mv-std_factor*gaia_std):
                    gdor_oscillations_f = np.append(gdor_oscillations_f,peak_array[i][0])
                    gdor_oscillations_p = np.append(gdor_oscillations_p,peak_array[i][2])
                    index_store.append(i)
        peak_array = np.delete(peak_array,index_store,axis=0)
        
    counter = 0
    
    while True:
        if (peak_array[counter][0]>minimum_frequency)&(peak_array[counter][0]<(2*nyquist-minimum_frequency)):
            if not include_gmode:
                if not any((abs(peak_array[counter][0]-nyquist)>abs(gdor_oscillations_f-nyquist)-FWHM*tolerance)&(abs(peak_array[counter][0]-nyquist)<abs(gdor_oscillations_f-nyquist)+FWHM*tolerance)):
                    break
            if include_gmode:
                break
        if counter==(len(peak_array)-1):
            return 'problem star', 'problem star'
        counter = counter + 1
    peak_f = np.append(peak_f,peak_array[counter][0])
    peak_p = np.append(peak_p,peak_array[counter][2])

    if signal_to_noise_factor is not False:
        noise_array = noise_complex(frequency_array,amplitude_array,timeseries,step_factor=step_factor,peak_filter_factor=3)

    while len(peak_f)<peak_number and counter<len(peak_array):
        if (peak_array[counter][0]>minimum_frequency)&(peak_array[counter][0]<(2*nyquist-minimum_frequency)):
            if not any((abs(peak_array[counter][0]-nyquist)>abs(peak_f-nyquist)-FWHM*tolerance)&(abs(peak_array[counter][0]-nyquist)<abs(peak_f-nyquist)+FWHM*tolerance)):
                if signal_to_noise_factor is not False:
                    index = find_nearest(frequency_array,peak_array[counter][0])
                    if not include_gmode:
                        if peak_array[counter][2] > signal_to_noise_factor*noise_array[index]:
                            if len(gdor_oscillations_f)<1:
                                peak_f = np.append(peak_f,peak_array[counter][0])
                                peak_p = np.append(peak_p,peak_array[counter][2])
                            if len(gdor_oscillations_f)>0:
                                if not any((abs(peak_array[counter][0]-nyquist)>abs(gdor_oscillations_f-nyquist)-FWHM*tolerance)&(abs(peak_array[counter][0]-nyquist)<abs(gdor_oscillations_f-nyquist)+FWHM*tolerance)):
                                    peak_f = np.append(peak_f,peak_array[counter][0])
                                    peak_p = np.append(peak_p,peak_array[counter][2])
                    if include_gmode:
                        if peak_array[counter][2] > signal_to_noise_factor*
                        noise_array[index]:
                            peak_f = np.append(peak_f,peak_array[counter][0])
                            peak_p = np.append(peak_p,peak_array[counter][2])
                else:
                    if not include_gmode:
                        if len(gdor_oscillations_f)<1:
                            peak_f = np.append(peak_f,peak_array[counter][0])
                            peak_p = np.append(peak_p,peak_array[counter][2])
                        if len(gdor_oscillations_f)>0:
                            if not any((abs(peak_array[counter][0]-nyquist)>abs(gdor_oscillations_f-nyquist)-FWHM*tolerance)&(abs(peak_array[counter][0]-nyquist)<abs(gdor_oscillations_f-nyquist)+FWHM*tolerance)):
                                peak_f = np.append(peak_f,peak_array[counter][0])
                                peak_p = np.append(peak_p,peak_array[counter][2])
                    if not include_gmode:
                        peak_f = np.append(peak_f,peak_array[counter][0])
                        peak_p = np.append(peak_p,peak_array[counter][2])
        counter = counter + 1
    
    P_max = np.reciprocal(peak_f)

    peak_f = peak_f*(1/u.day)
    P_max = P_max*(u.day)
    gdor_oscillations_f = gdor_oscillations_f*(1/u.day)
    gdor_oscillations_p = gdor_oscillations_p*(cds.ppm)
    peak_p = peak_p*(cds.ppm)

    if selection == 'frequency':
        if gdor_selection == 1:
            return peak_f, peak_p, gdor_oscillations_f, gdor_oscillations_p
        else:
            return peak_f, peak_p

    if selection == 'period':
        if gdor_selection == 1:
            return P_max, peak_p, gdor_oscillations_f, gdor_oscillations_p
        else:
            return P_max, peak_p

    else:
        print('no selection as to frequency or period made')
